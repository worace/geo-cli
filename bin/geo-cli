#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'geo-cli'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/geo-cli` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/geo-cli now"
  exit 64
end

include GLI::App

program_desc 'Geospatial utility belt'

version GeoCli::VERSION

subcommand_option_handling :normal
arguments :strict


desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Convert to and manipulate GeoJSON.'
# desc 'Treat all lines of input as a single collection'
# switch [:s,:slurp]
command :gj do |c|
  c.desc "Output entity as a geojson geometry"
  c.command :geometry do |c|
    c.action do |global_options,options,args|
      GeoCli::GeomReader.new(STDIN).each do |entity|
        puts entity.to_geojson
      end
    end
  end

  c.desc "Output entity as a geojson feature"
  c.command :feature do |c|
    c.action do |global_options,options,args|
      GeoCli::GeomReader.new(STDIN).each do |entity|
        puts entity.to_geojson(true)
      end
    end
  end

  c.desc "Combine entities into a geojson feature collection"
  c.command :fc do |c|
    c.action do |global_options,options,args|
      puts GeoCli::FeatureCollection.new(GeoCli::GeomReader.new(STDIN)).to_geojson
    end
  end
end

desc "Output entity as WKT"
command :wkt do |c|
  c.action do |global_options,options,args|
    GeoCli::GeomReader.new(STDIN).each do |geom|
      puts geom.to_wkt
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
